/**
 * Test program illustrating the architecture of a replicated distributed database. This models a
 * simple banking system that maintains a single balance in multiple locations. Deposits and
 * withdrawals (updates) can be performed at any of the locations. In the model, these updates are
 * performed by a "Server" model emulating a web server. The server also periodically queries for
 * the balance. All locations are required to report the same balance given the same time-stamped
 * query.
 *
 * If the two servers simultaneously update the record, then both updates are applied. Any query at
 * the time of these updates is required to report the result after both updates have been
 * performed.
 *
 * @author Edward A. Lee
 * @author Soroush Bateni
 */
target C {
  timeout: 5 sec
}

main reactor(query_period: time = 1 sec, num_remote_inputs: int = 1) {
  a = new Platform(
      query_period=query_period,
      update_period = 5 sec,
      update_amount=100,
      name = "San Francisco",
      num_remote_inputs=num_remote_inputs)
  b = new Platform(
      query_period=query_period,
      update_period = 1 sec,
      update_amount=-20,
      name="Berkeley",
      num_remote_inputs=num_remote_inputs)
  b.publish -> a.update
  a.publish -> b.update
}

/**
 * Mockup for a web server that issues deposits or withdrawals as well as periodic queries for the
 * balance in the database. The queries and updates are issued periodically with the period and
 * amount of the update controlled by parameters. In a real server, these outputs would not be
 * periodic, but rather would be triggered by external events, such as incoming HTTP requests.
 *
 * This reactor expects a reply to each query. It prints those replies. It produces an error in its
 * shutdown reaction if the number of replies does not match the number of queries.
 *
 * @param query_period The period of query outputs.
 * @param update_period The period of update outputs.
 * @param update_amount The amount of each deposit (or withdrawal if negative).
 * @param server_name The name (for reporting).
 *
 * @input reply Accepts the reply to a query for the balance.
 *
 * @output query Issue a query, expecting a reply.
 * @output update Issue an update.
 */
reactor Server(
    name: char* = "unnamed server",
    query_period: time = 150 msec,
    update_period: time = 100 msec,
    update_deadline: time = 200 msec,
    update_amount: int = 0,
    server_name: char* = "unnamed server") {
  timer query_trigger(0, query_period)
  timer update_trigger(0, update_period)
  input reply: int
  output query: bool
  output update: int
  state queries_outstanding: int = 0

  reaction(query_trigger) -> query {=
    lf_set(query, true);
    self->queries_outstanding++;
  =}

  reaction(update_trigger) -> update {=
    lf_set(update, self->update_amount);
  =} deadline(update_deadline) {=
    tag_t tag = lf_tag();
    lf_print_error("At tag (%lld, %u), deadline missed at database \"%s\". Rejecting update.\n"
        "   Elapsed physical time is %lld.",
        tag.time - lf_time_start(),
        tag.microstep,
        self->name,
        lf_time_physical_elapsed()
    );
  =}

  reaction(reply) {=
    lf_print("***** At tag (%lld, %u), server \"%s\" reports balance: %d.",
      lf_time_logical_elapsed(), lf_tag().microstep, self->server_name, reply->value
    );
    self->queries_outstanding--;
  =}

  reaction(shutdown) {=
    if (self->queries_outstanding != 0) {
      lf_print_error("Server \"%s\": Number of queries with no reply: %d.",
        self->server_name,
        self->queries_outstanding
      );
    } else {
      lf_print("Server \"%s\" successfully replied to all queries.",
        self->server_name
      );
    }
  =}
}

/**
 * A mockup for a replicated database. This simple database contains only one record, and the value
 * of that record is an integer. It represents a bank balance, where deposits and withdrawals
 * (updates) can occur at any node in the system. If two or more updates occur at the same logical
 * time, then all are applied.
 *
 * This reactor has two update inputs, `local_update` and `remote_update`. The first is intended to
 * be used for updates to the database that are generated on the local platform. The second receives
 * notifications of updates on remote platforms. When a `local_update` is received, the update will
 * also be sent to the `publish` output so that it can be forwarded to other replicas. When any
 * `remote_update` input arrives, its value will be added to the balance.
 *
 * The `query` input is used to retrieve the current balance. The balance will be sent to the
 * `balance` output in response. If a `query` and an update arrive simultaneously, the reply will
 * include the cumulative effect of all the updates.
 *
 * Instances of these `Database` reactors can be arranged in ring or in a broadcast configuration,
 * where each replica sends updates to all other replicas.
 *
 * There is a deadline on the `local_update` inputs. If this deadline is violated, then the update
 * is rejected and has no effect on the balance.
 *
 * @param update_deadline A deadline imposed on the reaction to `local_update` inputs.
 * @param name A name for the database instance (used in reporting).
 * @param num_remote_inputs The number of inputs from other database replicas.
 *
 * @input local_update An update (deposit or withdrawal) to add to the record.
 * @input remote_update A multiport input for receiving updates from other replicas.
 * @input query A trigger to read the current value of the record.
 *
 * @output publish This is just the update passed through.
 * @output balance The time value of the record.
 */
reactor Database(name: char* = "unnamed database", num_remote_inputs: int = 1) {
  input local_update: int
  input[num_remote_inputs] remote_update: int
  input query: bool
  output balance: int
  state record: int = 0

  reaction(local_update, remote_update) {=
    if (local_update->is_present) {
      self->record += local_update->value;
    }
    for (int i = 0; i < remote_update_width; i++) {
      if (remote_update[i]->is_present) {
        self->record += remote_update[i]->value;
      }
    }
    lf_print("At tag (%lld, %u), database \"%s\" updated balance to %d.\n"
        "   Elapsed physical time is %lld.",
        lf_time_logical() - lf_time_start(), lf_tag().microstep,
        self->name,
        self->record,
        lf_time_physical_elapsed()
    );
  =} STAA(4 msec) {=
    #ifdef FEDERATED_DECENTRALIZED
        for (int i = 0; i < remote_update_width; i++) {
          if (remote_update[i]->is_present) {
            lf_print_warning("At tag (%lld, %u), database \"%s\" "
                "received remote update (%d) with intended tag (%lld, %u).\n"
                "   Balance previously reported may have been incorrect.\n"
                "   Elapsed physical time is %lld.",
                current_tag.time - lf_time_start(),
                current_tag.microstep,
                self->name,
                remote_update[i]->value,
                remote_update[i]->intended_tag.time - lf_time_start(),
                remote_update[i]->intended_tag.microstep,
                lf_time_physical_elapsed()
            );
            self->record += remote_update[i]->value;
          }
        }
    #else
        // The tardy handler should not be invoked
        lf_print_error_and_exit("FATAL: Update is tardy and coordination is not decentralized.");
    #endif
  =}

  reaction(query) -> balance {=
    lf_set(balance, self->record);
  =}
}

/**
 * A mockup of a platform (e.g. a pod, a virtual machine, a physical machine, etc.) that hosts a
 * replicated database and a web server. The platform performs local updates and accepts remote
 * updates. Instances of this platform can be arranged in a ring or in a broadcast configuration,
 * where each platform broadcasts updates to all other platforms.
 *
 * @param query_period The period at which the balance is queried.
 * @param update_period The period at which local updates are generated.
 * @param update_amount The amount of each local update.
 * @param num_remote_inputs The number of remote inputs from other replicas.
 * @param STP The safe-to-process offset (used only in decentralized coordination).
 * @param name The name assigned to this platform (for reporting).
 *
 * @input update An update notification from another replica.
 *
 * @output publish A copy of any local updates.
 */
reactor Platform(
    query_period: time = 150 msec,
    update_period: time = 100 msec,
    update_amount: int = 0,
    num_remote_inputs: int = 1,
    // Used for more visible logging
    name: char* = "unnamed platform") {
  input[num_remote_inputs] update: int
  output publish: int
  server = new Server(
      name=name,
      query_period=query_period,
      update_period=update_period,
      update_amount=update_amount,
      server_name=name)
  database = new Database(name=name, num_remote_inputs=num_remote_inputs)
  server.query -> database.query
  server.update -> database.local_update
  database.balance -> server.reply
  server.update -> publish
  update -> database.remote_update
}
