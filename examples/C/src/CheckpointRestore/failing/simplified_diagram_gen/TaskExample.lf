target C

import TaskRetryTemplate, Task1Body from "TaskRetryTemplate.lf"

reactor TaskBody<IN_T, OUT_T, CHECK_T> extends Task1Body {
  preamble {=
    #define TASK1_SEG1_SLEEP_MSEC  200
    #define TASK1_SEG2_SLEEP_MSEC  200
    #define TASK1_SEG3_SLEEP_MSEC  200
    #define FAILURE_RATE 70 // % chance

    int task1_seg1(int in, int* out) {
      lf_sleep(MSEC(TASK1_SEG1_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 1;
      } else {
        *out = in + 1;
        return 0;
      }
    }

    int task1_seg2(int in, int* out) {
      lf_sleep(MSEC(TASK1_SEG2_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 2;
      } else {
        *out = in + 2;
        return 0;
      }
    }

    int task1_seg3(int in, int* out) {
      lf_sleep(MSEC(TASK1_SEG3_SLEEP_MSEC));
      if (rand() % 100 < FAILURE_RATE) {
        return 3;
      } else {
        *out = in + 3;
        return 0;
      }
    }

    int total_task1(int in, int* out, int* saved_value, int checkpoint) {
      if (checkpoint <= 1 && task1_seg1(in, saved_value)) return 1;
      if (checkpoint <= 2 && task1_seg2(*saved_value, saved_value)) return 2;
      if (checkpoint <= 3 && task1_seg3(*saved_value, saved_value)) return 3;
      *out = *saved_value;
      return 0;
    }
  =}

  input task_in: IN_T
  output t_out: OUT_T
  state saved_output: OUT_T
  state saved_value: CHECK_T

  reaction(start_seg) task_in -> f_seg, t_out {=
  // reaction(start_seg) task_in -> f_seg {=
    int result = total_task1(task_in->value, &self->saved_output, &self->saved_value, start_seg->value);
    lf_set(f_seg, result);
    // If the f_seg signal is 0, the Task was finished. Trigger the output value.
    if (result == 0) {
      lf_set(t_out, self->saved_output);
    }
    lf_print("Saved_value: %d", self->saved_value);
  =}
}

reactor OutHandler<OUT_T>{
  input trigger_out: int
  input t_out: OUT_T
  output task_out: OUT_T

  reaction(trigger_out) t_out -> task_out {=
  // If the failed_seg signal is 0, the Task was finished. Trigger the output value.
  // Already checked when sent from TaskBody, but check again to not trigger uninitialized values.
    if (trigger_out->value == 0) {
      lf_set(task_out, t_out->value);
    }  
  =}
}

reactor Task<IN_T, OUT_T, CHECK_T> extends TaskRetryTemplate {

  input task_in: IN_T
  output task_out: OUT_T

  task1body = new TaskBody<IN_T, OUT_T, CHECK_T>()
  task1tail = new OutHandler<OUT_T>()

  task_in->task1body.task_in
  trigger.start_seg -> task1body.start_seg
  task1body.f_seg->advance.f_seg
  advance.failed_seg->failed_seg
  advance.failed_seg->task1tail.trigger_out
  task1body.t_out->task1tail.t_out
  task1tail.task_out->task_out
}

