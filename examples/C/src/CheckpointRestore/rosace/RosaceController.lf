/**
 * Controller for the ROSACE case study, from:
 *
 * Claire Pagetti , David Saussié, Romain Gratia , Eric Noulard , Pierre Siron, "The ROSACE Case
 * Study: From Simulink Specification to Multi/Many-Core Execution," RTAS (2014).
 *
 * This implementation is based on code from:
 *
 * Deschamps, Henrick and Cappello, Gerlando and Cardoso, Janette and Siron, Pierre Coincidence
 * Problem in CPS Simulations: the R-ROSACE Case Study. (2018) In: 9th European Congress Embedded
 * Real Time Software and Systems ERTS2 2018, 31 January 2018 - 2 February 2018 (Toulouse, France).
 * https://www.erts2018.org/authors_detail_inverted_Cappello%20Gerlando.html
 *
 * The code was download from https://svn.onera.fr/schedmcore/branches/ROSACE_CaseStudy/.
 *
 * Since that original code bears an LGPL license, so does this program:
 *
 * (c) 2023 Regents of the University of California, LGPL-v3
 * (https://www.gnu.org/licenses/lgpl-3.0.html)
 *
 * This program implements throttle and elevator control.
 *
 * The style of execution is that each component has a `period` parameter that determines the
 * frequency at which it runs. The program relies on persistence of inputs in the C target and on
 * the dependency analysis of the *uses* field of reactor signature.
 *
 * @author Edward A. Lee
 * @author David Saussie
 * @author Claire Pagetti
 */
target C

preamble {=
  // Trimming parameters
  // These may be overridden in the top-level .lf file.
  #ifndef Va_eq
  #define Va_eq (230.0)   // Nominal airspeed?
  #define h_eq (10000.0)

  #define delta_th_eq (1.5868660794926)
  #define delta_e_eq (0.012009615652468)
  #endif

  #define FAILURE_RATE 30 // % chance
=}

reactor Filter(
    period: time = 10 ms,
    a: double[] = {0.0, 0.0},
    b: double[] = {0.0, 0.0},
    init_x1: double = 0.0,
    init_x2: double = 0.0) {
  input x: double
  output y: double

  state x1: double = 0.0
  state x2: double = 0.0

  timer t(0, period)

  reaction(startup) {=
    self->x1 = self->init_x1;
    self->x2 = self->init_x2;
  =}

  reaction(t) -> y {=
    lf_set(y, self->x2);
  =}

  reaction(t) x {=
    double x1_tmp = - self->a[0] * self->x2 + self->b[0] * x->value;
    double x2_tmp = self->x1 - self->a[1] * self->x2 + self->b[1] * x->value;
    // Update
    self->x1 = x1_tmp;
    self->x2 = x2_tmp;
  =}
}

reactor Command(period: time = 100 ms, value: double = 0.0) {
  timer t(0, period)
  output c: double

  reaction(t) -> c {=
    lf_set(c, self->value);
  =}
}

reactor Hold(
    period: time = 20 ms,
    Kp_h: double = 0.1014048,
    Ki_h: double = 0.0048288,
    h_switch: double = 50.0,
    Vz_c: double = -2.5,
    Va_c: double = 0.0,
    h_c: double = 11000) {
  timer t(0, period)

  input s: double   // Set point
  input x: double   // Measurement

  output c: double  // Command

  state integrator: double = 532.2730285

  reaction(t) s, x -> c {=
    double y = 0.0;

    double Ts_h = ((double)self->period)/1e9; // Period in seconds. (1.0/50.0)

    if ((x->value - s->value) < -self->h_switch) {
      // Output
      y = self->Vz_c;
    } else if ((x->value - s->value) > self->h_switch) {
      // Output
      y = -self->Vz_c;
    } else {
      // Output
      y = self->Kp_h * (x->value - s->value) + self->Ki_h * self->integrator;
      // State
      self->integrator += Ts_h * (x->value - s->value);
    }

    lf_set(c, y);
  =}
}

reactor VzControl(
    period: time = 20 ms,
    K2_intVz: double = 0.000627342822264,
    K2_Vz: double = -0.003252836726554,
    K2_q: double = 0.376071446897134,
    K2_az: double = -0.001566907423747) {
  timer t(0, period)

  input Vzc: double
  input azf: double
  input Vzf: double
  input qf: double

  output delta_ec: double

  state integrator: double = 0.0

  reaction(t) Vzc, azf, Vzf, qf -> delta_ec {=
    if (rand() % 100 < FAILURE_RATE) {
    } else {
      double Ts_K2 = ((double)self->period)/1e9; // Period in seconds. (1.0/50.0)

      // Output
      double y = self->K2_intVz * self->integrator
          + self->K2_Vz * Vzf->value
          + self->K2_q * qf->value
          + self->K2_az * azf->value + delta_e_eq;

      self->integrator += Ts_K2 * (Vzc->value - Vzf->value);
      lf_set(delta_ec, y);
    }
  =}
}

reactor VaControl(
    period: time = 20 ms,
    K1_intVa: double = 0.049802610664357,
    K1_Va: double = -0.486813084356079,
    K1_Vz: double = -0.077603095495388,
    K1_q: double = 21.692383376322041) {
  timer t(0, period)

  input Vzf: double
  input Vaf: double
  input Vac: double
  input qf: double

  output delta_thc: double

  state integrator: double = 0.0

  reaction(t) Vzf, Vaf, Vac, qf -> delta_thc {=
    if (rand() % 100 < FAILURE_RATE) {
    } else {
      double Ts_K1 = ((double)self->period)/1e9; // Period in seconds. (1.0/50.0)

      // Output
      double y = self->K1_intVa * self->integrator
          + self->K1_Va * (Vaf->value - Va_eq)
          + self->K1_Vz * Vzf->value + self->K1_q * qf->value + delta_th_eq;
      self->integrator += Ts_K1 * (Vac->value - Vaf->value + Va_eq);
      lf_set(delta_thc, y);
    }
  =}
}

reactor RosaceController(filter_period: time = 10 ms) {
  // Sensor inputs from aircraft
  // Vertical speed
  input Vz: double
  input Va: double          // True airspeed
  input h: double           // Altitude measurement
  input az: double          // Vertical acceleration
  input q: double           // Pitch rate

  // Command inputs
  // Altitude command
  input c: double
  input s: double           // Speed command

  output delta_thc: double  // Engine control
  output delta_ec: double   // Elevator control

  h_c = new Hold()

  h_f = new Filter(
      period = 100 ms,
      init_x1 = {= h_eq * (1.0 - 1.477888930110354 /*a[1]*/ - 0.049596808318647 /*b1*/) =},
      init_x2 = {= h_eq =},
      a = {0.586756156020839, -1.477888930110354},
      b = {0.049596808318647, 0.059270417591839})
  az_f = new Filter(
      period=filter_period,
      init_x1=0.0,
      init_x2=0.0,
      a = {0.169118914523145, -0.518588903229759},
      b = {0.229019233988375, 0.421510777305010})
  Vz_f = new Filter(
      period=filter_period,
      init_x1=0.0,
      init_x2=0.0,
      a = {0.914975803093201, -1.911199519984605},
      b = {0.001860178914816, 0.001916104193780})
  q_f = new Filter(
      period=filter_period,
      init_x1=0.0,
      init_x2=0.0,
      a = {0.586756156020839, -1.477888930110354},
      b = {0.049596808318647, 0.059270417591839})
  Va_f = new Filter(
      period=filter_period,
      init_x1 = {= Va_eq * (1.0 - 1.911199519984605 /*a[1]*/ - 0.001916104193780 /*b[1]*/) =},
      init_x2 = {= Va_eq =},
      a = {0.914975803093201, -1.911199519984605},
      b = {0.001860178914816, 0.001916104193780})

  Vz_ct = new VzControl()
  Va_ct = new VaControl()

  h, az, Vz, q, Va -> h_f.x, az_f.x, Vz_f.x, q_f.x, Va_f.x
  c -> h_c.s
  h_f.y -> h_c.x

  Vz_f.y, az_f.y, h_c.c, q_f.y -> Vz_ct.Vzf, Vz_ct.azf, Vz_ct.Vzc, Vz_ct.qf
  Vz_ct.delta_ec -> delta_ec

  Va_f.y, Vz_f.y, s, q_f.y -> Va_ct.Vaf, Va_ct.Vzf, Va_ct.Vac, Va_ct.qf
  Va_ct.delta_thc -> delta_thc
}
