/**
 * Simple situation where STA and STAA are both 0 because the Downstream reactor has no events to
 * process except input events. It is safe to advance to the tag of any input. This relies on the
 * assumption that inputs events arrive in tag order.
 *
 * @author Edward A. Lee
 */
target C {
  coordination: decentralized,
  timeout: 1 s,
  workers: 8
}

reactor Upstream {
  output out: int
  timer t(0, 100 ms)
  state counter: int = 0

  reaction(t) -> out {=
    self->counter++;
    lf_sleep(MSEC(10));
    lf_set(out, self->counter);
    lf_print("Upstream " PRINTF_TIME ": Sensing... (counter=%d)",
        lf_time_logical_elapsed(), self->counter);
  =}
}

@label("STA == STAA == 0")
reactor Downstream(STA: time = 0) {
  input in: int

  reaction(in) {=
    lf_print("Downstream " PRINTF_TIME ": Received (in=%d) at physical time " PRINTF_TIME,
        lf_time_logical_elapsed(), in->value, lf_time_physical_elapsed());
  =} STAA(0) {=
    lf_print("Downstream " PRINTF_TIME ": *** STAA violation on data (in=%d) at physical time " PRINTF_TIME,
        lf_time_logical_elapsed(), in->value, lf_time_physical_elapsed());
  =}
}

federated reactor {
  s = new Upstream()
  @label("STA == STAA == 0")
  a = new Downstream()

  s.out -> a.in
}
