/**
 * This project simulates the behavior of ski lifts with a focus on improving safety and reducing
 * labor costs through automation using Lingua Franca. The simulation models key aspects of ski lift
 * operations, including:
 *
 * 1. Passenger Flow & Lift Capacity: Ensuring smooth and efficient boarding/unboarding.
 *
 * 2. Safety Mechanisms: Detecting potential dangers and automating responses to prevent accidents.
 *
 * 3. Autonomous Control: Optimizing lift operations with minimal human intervention.
 *
 * The goal is to explore how automation can enhance safety while reducing operational costs, making
 * ski lifts more efficient and reliable.
 *
 * @author Cheng Yen, Tsai
 */
target C

import EntryGate from "lib/EntryGate.lf"
import EntrySensor from "lib/EntrySensor.lf"
import ObjectDetector from "lib/ObjectDetector.lf"
import ScreenPrinter from "lib/ScreenPrinter.lf"
import LiftMotion from "lib/LiftMotion.lf"
import PressureSensor from "lib/PressureSensor.lf"

main reactor Lift {
  state move: bool = true
  state open: bool = false
  state stay_cur_mode: bool = true
  state urgent: bool = false
  state count: int32_t = 0
  state start_number: int32_t = 0
  state end_number: int32_t = 0
  state screen_wideth: int32_t = 80
  state passenger_cnt: int32_t = 0
  state ready_weight_from_sensor: int32_t = 0
  state lift_weight_from_sensor: int32_t = 0
  state ready_weight: int32_t = 0
  state lift_weight: int32_t = 0
  state exit_weight: int32_t = 0
  liftMotion = new LiftMotion()
  entryGate = new EntryGate()
  entrySensor = new EntrySensor()
  objectDetector = new ObjectDetector()
  screenPrinter = new ScreenPrinter()
  pressureSensor = new PressureSensor()

  timer t(500 msec, 500 msec)

  state gate_t_cnt: int32_t = 0
  state offset: int32_t = 0
  timer t_gate(0, 1 sec)

  // Start the program (When staff press the start button of the lift)
  reaction(startup) -> screenPrinter.offset, screenPrinter.motion_msg {=
    lf_set(screenPrinter.offset, self->offset);
    lf_set(screenPrinter.motion_msg, "Moving");
    self->offset = (self->offset + 1) % self->screen_wideth; // Update the offset for the next frame
  =}

  reaction(objectDetector.start_number) {=
    if (objectDetector.start_number != 0) {
      self->start_number = objectDetector.start_number->value;
    }
  =}

  reaction(t) -> liftMotion.move, liftMotion.offset {=
    if (!self->urgent) {
      self->move = true;
      self->offset = (self->offset + 1) % self->screen_wideth; // Update the offset for the next frame
      lf_set(liftMotion.move, self->move);
      lf_set(liftMotion.offset, self->offset);
    } else {
      self->move = false;
      lf_set(liftMotion.move, self->move);
    }
  =}

  /**
   * The chairlift cycle takes 10 seconds from ready to takeoff. The process is as follows:
   * - 1s ~ 3s: Entry gates are open for passengers to enter.
   * - 4s ~ 7s: Passengers move to the ready area.
   * - 7s: The weight of the pressure sensor in the ready area is recorded as `ready_weight`.
   * - 8s ~ 9s: Check on the exit area to see if there are people block the exit.
   * - 10s: The weight on the chairlift is measured and compared to `ready_weight` to verify if all
   * passengers are on the lift. If there is a mismatch between the two weights, the lift will stop
   * until they match. This simulates a scenario where a passenger fails to get on the lift within
   * the second but successfully boards afterward.
   *
   * When the weight
   */
  reaction(t_gate) -> entryGate.open, screenPrinter.gate_msg, screenPrinter.debug_int {=
    int32_t gate_t_cnt_offset = self->gate_t_cnt % 10;
    lf_set(screenPrinter.debug_int, gate_t_cnt_offset);
    if (gate_t_cnt_offset < 3) {
      self->open = true;
      lf_set(entryGate.open, self->open);
      lf_set(screenPrinter.gate_msg, "Open");
      self->gate_t_cnt ++;
    } else {
      self->open = false;
      lf_set(entryGate.open, self->open);
      lf_set(screenPrinter.gate_msg, "Close");
      if (gate_t_cnt_offset == 6) {
        self->ready_weight = self->ready_weight_from_sensor;
        self->lift_weight = self->lift_weight_from_sensor;
        self->gate_t_cnt ++;
      } else if (gate_t_cnt_offset == 7 || gate_t_cnt_offset == 8) {
        if (self->exit_weight <= 50) {
            self->urgent = false;
            self->gate_t_cnt ++;
        } else {
            self->urgent = true;
        }
      } else if (gate_t_cnt_offset == 9) {
        // set 50 lbs for deviation
        if (abs(self->ready_weight - self->lift_weight) <= 50) {
          self->ready_weight = 0;
          self->gate_t_cnt = 0;
          self->urgent = false;
        } else {
          self->urgent = true;
        }
      } else {
        self->gate_t_cnt ++;
      }
    }
  =}

  reaction(objectDetector.end_number) {=
    if (objectDetector.end_number != 0) {
      self->end_number = objectDetector.end_number->value;
    }
  =}

  reaction(pressureSensor.ready_weight) -> screenPrinter.ready_weight {=
    self->ready_weight = pressureSensor.ready_weight->value;
      lf_set(screenPrinter.ready_weight, self->ready_weight);
  =}

  reaction(pressureSensor.lift_weight) -> screenPrinter.lift_weight {=
    self->lift_weight = pressureSensor.lift_weight->value;
      lf_set(screenPrinter.lift_weight, self->lift_weight);
  =}

  reaction(pressureSensor.exit_weight) -> screenPrinter.exit_weight {=
    self->exit_weight = pressureSensor.exit_weight->value;
      lf_set(screenPrinter.exit_weight, self->exit_weight);
  =}
}
