/**
 * This program uses a modal model to display a variety of LED animations on a WS2812 RGB Led Panel.
 * The WS2812, or Neopixel, uses precise timing of pulses to encode 1s and 0s. See lib/ws2812.pio to
 * see the mechanism. Animations can be added or altered in lib/src/ws2812.c and then added to a
 * mode in the LED reactor.
 *
 * For convenience a remapped array can be used to interact with the LED array in a row, column
 * format. The remapping object in the LED reactor
 *
 * @author Benjamin Gunnels
 */
target C {
  platform: {
    name: "rp2040",
    board: "pico"
  },
  single-threaded: true,
  files: ["./lib/"],
  cmake-include: ["./lib/lib.txt"]
}

preamble {=
  #include <stdio.h>
  #include "pico/stdlib.h"
  #include "hardware/timer.h"
  #include "led_remapping.h"
  #include "ws2812.h"
  #include "hardware/pio.h"
  #include "ws2812.pio.h"

  #define NUM_MODES 5
  #define NUM_LEDS 256 // How many leds are in your array
=}

reactor LED {
  input change_mode: int
  input frame: int

  preamble {=
    #define ROWS 16
    #define COLS 16

    int sm = 0;

    PIO pio = pio0;
    uint offset;

    // Create a one dimensional array to map the colors onto the LED strip
    uint32_t led_strip[ROWS*COLS] = {0};

    // Create a two dimensional array for convenience mapping effects
    uint32_t** remapping;
  =}

  reaction(startup) {=
    // Initialize the remapping array during startup
    remapping = remap(ROWS, COLS);
    if (remapping == NULL) {
        printf("Error: Remapping initialization failed.\n");
    } else {
        printf("Remapping successfully initialized.\n");
    }

    offset = pio_add_program(pio, &ws2812_program);

    ws2812_program_init(pio, sm, offset, ws2812_config.pin, 800000, false); // 800kHz WS2812B
  =}

  initial mode MODE_1 {
    reaction(frame) {=
      rainbow(led_strip, remapping, frame->value, 0.01, ROWS, COLS);

      // Send the colors to the WS2812 LEDs
      send_colors(pio, sm, led_strip, NUM_LEDS);
    =}

    reaction(change_mode) -> reset(MODE_2) {=
      lf_set_mode(MODE_2);
    =}
  }

  mode MODE_2 {
    reaction(frame) {=
      aurora(led_strip, remapping, frame->value, 0.015, ROWS, COLS);

      // Send the colors to the WS2812 LEDs
      send_colors(pio, sm, led_strip, NUM_LEDS);
    =}

    reaction(change_mode) -> reset(MODE_3) {=
      lf_set_mode(MODE_3);
    =}
  }

  mode MODE_3 {
    reaction(frame) {=
      beating_heart(led_strip, remapping, frame->value, 0.01, ROWS, COLS);

      // Send the colors to the WS2812 LEDs
      send_colors(pio, sm, led_strip, NUM_LEDS);
    =}

    reaction(change_mode) -> reset(MODE_4) {=
      lf_set_mode(MODE_4);
    =}
  }

  mode MODE_4 {
    reaction(frame) {=
      chessboard(led_strip, remapping, frame->value, 0.01, ROWS, COLS);

      // Send the colors to the WS2812 LEDs
      send_colors(pio, sm, led_strip, NUM_LEDS);
    =}

    reaction(change_mode) -> reset(MODE_5) {=
      lf_set_mode(MODE_5);
    =}
  }

  mode MODE_5 {
    reaction(frame) {=
      old_glory(led_strip, remapping, frame->value, 0.01, ROWS, COLS);

      // Send the colors to the WS2812 LEDs
      send_colors(pio, sm, led_strip, NUM_LEDS);
    =}

    reaction(change_mode) -> reset(MODE_1) {=
      lf_set_mode(MODE_1);
    =}
  }
}

main reactor {
  physical action button_press
  logical action change_mode

  state next_frame: int = 0
  state led_mode: int = 0

  timer iterator(1 s, 300 ms)
  timer mode_poll(1 s, 100 ms)

  led = new LED()

  preamble {=
    int button_pressed = 0;

    void initialize_leds(ws2812_config_t* ws2812_config) {
        gpio_init(ws2812_config->pin);
        gpio_set_dir(ws2812_config->pin, GPIO_OUT);
        gpio_put(ws2812_config->pin, 0);
    }

    static void set_mode(int * mode)
    {
        // Circle around when the mode is increased
        *mode = (*mode < NUM_MODES) ? *mode + 1 : 1;
    }

    int poll_mode(int * mode)
    {
        if (!gpio_get(BUTTON))
        {
            if (button_pressed)
            {
                set_mode(mode);
                return 1;
            }
            button_pressed = 1; // Set button_pressed to true, check that it is still being pressed the next time it is polled
        }
        else button_pressed = 0;

        return 0;
    }
  =}

  reaction(startup) {=
    // Initialize the hardware
    stdio_init_all();
    // Initialize the LED pin
    initialize_leds(&ws2812_config);

    // Initialize the switch button pin
    gpio_init(BUTTON);
    gpio_set_dir(BUTTON, GPIO_IN);
    gpio_pull_up(BUTTON);

    // Time to breathe
    sleep_ms(1000);
  =}

  reaction(mode_poll) -> led.change_mode {=
    if (poll_mode(&(self->led_mode))) {
        lf_set(led.change_mode, 1); // Trigger mode change
    }
  =}

  reaction(iterator) -> led.frame {=
    if (self->next_frame < 760) self->next_frame++;
    else self->next_frame = 0; // Reset the frame every 760 frames

    lf_set(led.frame, self->next_frame);
  =}
}
