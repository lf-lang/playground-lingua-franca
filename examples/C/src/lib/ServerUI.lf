/**
 * Start an HTTP server, listen for requests, and provide responses. When an HTTP request comes in,
 * this reactor outputs on the request output the part of the path starting with the first slash.
 * For example, if the URL is http://localhost:8080/foo, then the request output will produce
 * "/foo". If there is nothing after the first slash or no first slash, then this reactor will
 * instead return the contents of the initial_file parameter, output true on the initialized output,
 * and output nothing on the request output.
 *
 * @param initial_file Path to the initial HTML file to serve, relative to the source directory of
 * the main reactor. Defaults to "page.html".
 * @param hostport The host port number, which defaults to 8080.
 *
 * @author Edward A. Lee
 */
target C {
  keepalive: true
}

import FileReader from "FileReader.lf"

preamble {=
  #ifndef SERVERUI_H
  #define SERVERUI_H
  #include "util.h"     // Defines lf_print()
  #include "platform.h"   // Defines lf_thread_t, etc.

  #include <sys/socket.h>
  #include <arpa/inet.h>
  #include <errno.h>    // Defines errno
  #include <string.h>   // Defines strerror()
  typedef struct browser_ui_t {
    bool running;     // Indicator that listener thread is running.
    int client_socket;  // If non-negative, client socket awaiting response.
    void* req_action;   // The physical action triggered upon request.
    uint16_t hostport;  // The port to use for HTTP access.
    char* initial_page; // Initial web page contents.
  } browser_ui_t;
  #endif // SERVERUI_H
=}

reactor ServerUI(initial_file: string = "page.html", hostport: uint16_t = 8080) extends FileReader {
  output initialized: bool
  output request: char*
  input response: char*

  physical action req_action: char*

  state browser_ui: browser_ui_t

  preamble {=
    const char html_header[] =  "HTTP/1.1 200 OK\r\n"
          "Content-Type: text/html; charset=UTF-8\r\n\r\n";

    void* listener_thread(void* args) {
      browser_ui_t* browser_ui = (browser_ui_t*)args;

      int server_socket = socket(AF_INET, SOCK_STREAM, 0);
      if (server_socket < 0) {
        lf_print_error_and_exit("Error creating socket.");
      }

      int one = 1;
      // Allow reusing of local addresses.
      setsockopt(server_socket, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(int));

      struct sockaddr_in server_address;
      server_address.sin_family = AF_INET;
      server_address.sin_addr.s_addr = INADDR_ANY;
      server_address.sin_port = htons(browser_ui->hostport);

      if (bind(server_socket, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) {
        close(server_socket);
        lf_print_error_and_exit("Error binding socket.");
      }
      // Pending queue length of 5.
      listen(server_socket, 5);

      lf_print("****** Point your browser to http://localhost:%d", browser_ui->hostport);

      while(browser_ui->running) {
        struct sockaddr_in client_address;
        int client_address_length = sizeof(client_address);

        browser_ui->client_socket = accept(server_socket, (struct sockaddr *)&client_address, (socklen_t*)&client_address_length);

        if (browser_ui->client_socket < 0) {
          lf_print_error_and_exit("Error accepting connection.");
        }

        char buffer[2048] = {0};
        ssize_t bytes_read = read(browser_ui->client_socket, buffer, 2047); // Ensure null terminator.
        if (bytes_read == 0) continue;
        if (bytes_read < 0) {
          lf_print_warning("Error %d reading socket: %s", errno, strerror(errno));
          continue;
        }

        lf_print("Received: '%s'", buffer);

        // The response depends on the path part of the request.
        const char *start_of_path = strchr(buffer, ' ');
        if (start_of_path != NULL && strncmp("/ ", start_of_path + 1, 2) != 0) {
          const char *end_of_path = strchr(start_of_path + 1, ' ') + 1;
          if (end_of_path != NULL  && end_of_path - start_of_path > 1) {
            size_t length = end_of_path - start_of_path - 1;
            char* path = (char*)malloc(length + 1);
            strncpy(path, start_of_path + 1, length);
            path[length] = '\0';
            lf_schedule_value(browser_ui->req_action, 0, path, length + 1);
          }
        } else {
          // Default is to write initial page.
          write(browser_ui->client_socket, html_header, strlen(html_header));
          write(
            browser_ui->client_socket,
            browser_ui->initial_page,
            strlen(browser_ui->initial_page)
          );
          close(browser_ui->client_socket);
          browser_ui->client_socket = -1;
          lf_schedule_copy(browser_ui->req_action, 0, "", 1);
        }
      }
      return NULL;
    }
  =}

  reaction(startup) -> req_action {=
    // Read the default file to serve.
    self->browser_ui.initial_page = read_file(self->initial_file);

    self->browser_ui.running = true;
    self->browser_ui.client_socket = -1; // No client socket awaiting response.
    self->browser_ui.req_action = req_action;
    self->browser_ui.hostport = self->hostport;

    lf_thread_t listener;
    lf_thread_create(&listener, &listener_thread, &self->browser_ui);
  =}

  reaction(req_action) -> request, initialized {=
    if (strlen(req_action->value) == 0) {
      lf_set(initialized, true);
    } else {
      lf_set_token(request, req_action->token);
    }
  =}

  reaction(response) {=
    if (self->browser_ui.client_socket < 0) {
      lf_print_error("No pending request at the server!");
    }
    char *http_response = "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n";
    write(self->browser_ui.client_socket, http_response, strlen(http_response));
    write(self->browser_ui.client_socket, response->value, strlen(response->value));
    close(self->browser_ui.client_socket);
    self->browser_ui.client_socket = -1;
  =}

  reaction(shutdown) {=
    self->browser_ui.running = false;
    free(self->browser_ui.initial_page);
  =}
}
