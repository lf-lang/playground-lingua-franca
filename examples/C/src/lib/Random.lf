/**
 * This reactor is a base class for reactors that generate or use random numbers. Available methods
 * are:
 *
 * * random(): returns an integer between 0 and RAND_MAX.
 * * exponential(lambda): returns an exponential random variable with rate lambda (expected value
 * 1/lambda).
 * * bernoulli(p): returns 1 with probability p and 0 with probability 1-p.
 *
 * This reactor ensures that if a seed is set, then the reactor returns a repeatable random number
 * sequence regardless of how many other reactors are generating random numbers.
 *
 * The seed defaults to 0, which indicates to use the starting logical time (or more precisely, the
 * low-order 32 bits of the starting logical time) as a seed. If any seed other than 0 is given,
 * then the sequence of random numbers will be repeatable in the sense that every execution of the
 * program will produce the same sequence.
 *
 * @author Edward A. Lee
 */
target C

preamble {=
  #include <stdlib.h>
  #include <math.h>
=}

reactor Random(seed: {= unsigned int =} = 0) {
  reaction(startup) {=
    if (self->seed == 0) {
      self->seed = (unsigned int)lf_time_logical();
    }
  =}

  method random(): int {=
    return rand_r(&self->seed);
  =}

  method exponential(lambda: double): double {=
    double u = random() / (RAND_MAX + 1.0);
    return -log(1.0 - u) / lambda;
  =}

  method bernoulli(p: double): int {=
    int rand = rand_r(&self->seed);
    if (rand < (RAND_MAX + 1.0) * p) return 1; else return 0;
  =}
}
