/**
 * A web socket server enabling a user interface realized in the browser. This creates a web server
 * that listens on a port (default 8080) for web socket connections. The intended usage is that you
 * create a client in an HTML/JavaScript file that connects to this server and provides a
 * browser-based user interface.
 *
 * If an `initial_file` parameter value is provided, it is expected to be a path relative to your
 * source `.lf` file. This can be used to provide the initial HTML (with embedded JavaScript) that
 * will then establish a web socket connection to the running LF program.
 *
 * When a connection is established with a client, an output is produced on the `connected` port
 * that is a struct with a unique `wsi` (web socket interface) for the client and a boolean
 * indicating whether the connection is being opened or closed. The `wsi` can be used to provide
 * input at the send port that will target this specific client.
 *
 * To send messages to a client, construct a dynamically allocated struct of type
 * `web_socket_message_t`, set its `wsi` field to the value provided by the connected output, and
 * set its `message` and `length`. The sending data type is `void*`, so any byte array can be sent.
 * The `binary` field of the `web_socket_message_t` should be set to true if the data being sent is
 * not a string. If you sending and receiving strings, consider using the simpler wrapper
 * `WebSocketServerString`.
 *
 * When a message is received from a client, a struct of type `web_socket_message_t` will be
 * produced on the `received` output port. You can use the `wsi` field to determine which client
 * sent the message.
 *
 * You can limit the number of clients by setting the `max_clients` parameter. It defaults to 0,
 * which means there is no limit. A common case for an embedded application might be 1 to ensure
 * that only one client connects to your application.
 *
 * To broadcast a message to all active clients, simply provide an input where the `wsi` field is
 * `NULL`.
 *
 * This uses the <a href="https://libwebsockets.org">libwebsockets</a> (see <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/index.html">API documentation</a> and <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/md_READMEs_README_build.html">installation
 * instructions</a>). To install on MacOS, we recommending using brew:
 * <pre> brew install libwebsockets
 * </pre> This puts the compiled libraries in {@code /usr/local/lib}, and these libraries can be
 * linked to using the {@code -lwebsockets} compile option or the {@code WebSocketCmake.txt} Cmake
 * include file.
 *
 * The data conveyed can be any byte array. In case a received value is a string that is not null
 * terminated, this reactor appends a null character after the message payload. It does not include
 * this null character in the length field of the output struct, but rather just reports the length
 * as reported by the incoming message. If the `binary` parameter is set to true, then JavaScript at
 * the receiving end will get a Blob. Otherwise, it gets text.
 *
 * A key limitation is that this should use the secure sockets API in libwebsockets to get SSL, but
 * it does not currently.
 *
 * @param hostport The host port number, which defaults to 8080.
 * @param initial_file If non-NULL and non-empty, a file name to serve to HTTP requests.
 * @param max_clients Maximum number of clients, or 0 for no upper bound.
 *
 * @author Edward A. Lee
 */
target C {
  keepalive: true,
  cmake-include: ["WebSocketCmake.txt"]
}

import FileReader from "FileReader.lf"

preamble {=
  #ifndef WEBSOCKET_H
  #define WEBSOCKET_H
  #include "util.h"     // Defines lf_print()
  #include "platform.h"   // Defines lf_thread_t, etc.
  #include "hashset/hashset.h"  // For storing web socket instances that are connected.

  #include <libwebsockets.h>

  /**
   * A web socket string message together with its web socket instance.
   * This needs a destructor and copy constructor because the message
   * is assumed to be in allocated memory.
   */
  typedef struct web_socket_message_t {
    struct lws* wsi;     // Web socket instance.
    size_t length;
    void* message;
    bool binary;
    struct web_socket_message_t* next; // Pointer to the next message in the list or NULL for end.
  } web_socket_message_t;

  typedef struct server_status_t {
    void* connected_action;     // Action to notify of changes in connected status.
    void* received_action;      // Action to notify of messages received.
    struct lws_context* context;  // The context.
    int max_clients;            // Maximum number of clients.
    int* client_count;          // Pointer to the client_count state variable.
    bool running;               // Indicator that the listening thread is running.
    web_socket_message_t* pending_messages; // Head of a list of pending messages to send.
    lf_mutex_t* mutex;          // Mutex for modifying this struct.
    string initial_file;        // File to serve in response to HTTP requests.
    hashset_t connected_instances; // Set of instances with active web socket connections.
  } server_status_t;

  /**
   * Identifier for a web socket instance together with its connected state.
   * No need for a destructor or copy constructor here because the libwebsockets
   * code handles deallocating the wsi when the WS is closed.
   */
  typedef struct web_socket_instance_t {
    struct lws* wsi;     // Web socket instance.
    bool connected;
  } web_socket_instance_t;

  /** Destructor for an instance of web_socket_message_t. */
  void web_socket_message_destructor(void* message);

  /** Copy constructor for an instance of web_socket_message_t. */
  void* web_socket_message_copy_constructor(void* message);

  #endif // WEBSOCKET_H
=}

reactor WebSocketServer(
    hostport: int = 8080,
    initial_file: string = {= NULL =},
    max_clients: int = 0) extends FileReader {
  output connected: web_socket_instance_t
  output received: web_socket_message_t*

  input send: web_socket_message_t*

  physical action connected_action: web_socket_instance_t
  physical action received_action: web_socket_message_t*

  state status: server_status_t
  state client_count: int = 0

  preamble {=
    // Thread handling incoming messages.
    // All lws calls except lws_cancel_service must occur in this thread.
    void* websocket_thread(void* args) {
      server_status_t* status = (server_status_t*)args;

      while(status->running) {
        // Invoke any pending callbacks.
        // According to the docs, the timeout argument is ignored.
        // Nevertheless, set to 100ms.
        lws_service(status->context, 100);
      }
      lws_context_destroy(status->context);
      return NULL;
    };

    // Callback handling HTTP requests.
    static int callback_http(struct lws *wsi, enum lws_callback_reasons reason, void *user, void *in, size_t len) {
      bool result;
      server_status_t* status = (server_status_t*)lws_context_user(lws_get_context(wsi));
      if (status == NULL) {
        lf_print_error_and_exit("User struct NULL in callback!");
      }
      LF_PRINT_LOG("HTTP callback invoked with reason: %d", reason);
      web_socket_instance_t ws_instance;
      switch(reason) {
        case LWS_CALLBACK_HTTP:
          lf_print("New client HTTP request.");
          // HTTP request that is not asking for an upgrade.
          // If the initial_file parameter is non-empty, serve that file.
          if (status->initial_file != NULL && strlen(status->initial_file) > 0) {
            // Manually serve the file with proper headers for Safari compatibility
            char* file_contents = read_file(status->initial_file);
            long file_size = strlen(file_contents);

            // Send HTTP headers
            const char* headers = "HTTP/1.1 200 OK\r\n"
                                  "Content-Type: text/html; charset=UTF-8\r\n"
                                  "Content-Length: %ld\r\n"
                                  "Cache-Control: no-cache\r\n\r\n";

            char header_buffer[512];
            snprintf(header_buffer, sizeof(header_buffer), headers, file_size);

            lws_write(wsi, (unsigned char*)header_buffer, strlen(header_buffer), LWS_WRITE_HTTP_HEADERS);
            lws_write(wsi, (unsigned char*)file_contents, file_size, LWS_WRITE_HTTP);

            free(file_contents);
          }
          break;
        case LWS_CALLBACK_WSI_CREATE:
          LF_PRINT_LOG("**** Web socket connection requested.");
          break;
        case LWS_CALLBACK_SERVER_NEW_CLIENT_INSTANTIATED:
          LF_PRINT_LOG("**** Web socket new client.");
          break;
        case LWS_CALLBACK_HTTP_CONFIRM_UPGRADE:

          // NOTE: We do not need to lock status mutex to check and update client_count
          // because it is only checked and updated in this websocket_thread.

          // Check against maximum number of connections.
          if (status->max_clients > 0 && *status->client_count >= status->max_clients) {
            // Deny the connection.
            lf_print_warning("**** Maximum number of clients reached. Denying connection.");
            // Increment the client count past the maximum because it will be
            // decremented when this closes and the browser will retry.
            *status->client_count = *status->client_count + 1;

            return 1;
          }

          *status->client_count = *status->client_count + 1;

          LF_PRINT_LOG("**** Web socket connection established for client %d.", *status->client_count);

          ws_instance.wsi = wsi;
          ws_instance.connected = true;

          // NOTE: Seem to need a delay in this action because otherwise
          // the application may try to send a message to the socket before
          // opening has completed.
          lf_schedule_copy(status->connected_action, MSEC(500), &ws_instance, 1);

          LF_MUTEX_LOCK(status->mutex);
          // Add the wsi to the set of connected web socket instances.
          hashset_add(status->connected_instances, wsi);
          LF_MUTEX_UNLOCK(status->mutex);

          break;
        case LWS_CALLBACK_WSI_DESTROY:
          LF_PRINT_LOG("**** Connection closed.");

          *status->client_count = *status->client_count - 1;

          ws_instance.wsi = wsi;
          ws_instance.connected = false;

          lf_schedule_copy(status->connected_action, 0, &ws_instance, 1);

          // Remove the wsi from the set of connected web socket instances.
          LF_MUTEX_LOCK(status->mutex);
          hashset_remove(status->connected_instances, wsi);
          LF_MUTEX_UNLOCK(status->mutex);

          break;
        case LWS_CALLBACK_CLOSED:
        case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:
          lf_print_error("*** connection error.");

          *status->client_count = *status->client_count - 1;

          ws_instance.wsi = wsi;
          ws_instance.connected = false;

          lf_schedule_copy(status->connected_action, 0, &ws_instance, 1);

          // Remove the wsi from the set of connected web socket instances.
          LF_MUTEX_LOCK(status->mutex);
          hashset_remove(status->connected_instances, wsi);
          LF_MUTEX_UNLOCK(status->mutex);

          break;
        default:
          LF_PRINT_LOG("*** Unhandled callback with lws_callback_reasons %d.", reason);
          break;
      }
      return 0;
    }

    // Callback handling web socket requests.
    static int callback_ws(struct lws *wsi, enum lws_callback_reasons reason, void *user, void *in, size_t len) {
      LF_PRINT_LOG("WS callback invoked with reason: %d", reason);
      server_status_t* status = (server_status_t*)lws_context_user(lws_get_context(wsi));
      web_socket_message_t* to_send;
      web_socket_message_t** previous_pointer;

      switch(reason) {
        case LWS_CALLBACK_EVENT_WAIT_CANCELLED:
          // lws_service() blocking call interrupted. Check for messages to send.
          // Need a lock because we are accessing pending_messages.
          LF_MUTEX_LOCK(status->mutex);
          if (status->pending_messages) {
            lws_callback_on_writable(status->pending_messages->wsi);
          }
          LF_MUTEX_UNLOCK(status->mutex);
          break;

        case LWS_CALLBACK_RECEIVE:
          if (len > 0) {
            LF_PRINT_LOG("**** Server received WS message.");

            web_socket_message_t* received = (web_socket_message_t*)malloc(sizeof(web_socket_message_t));
            LF_ASSERT_NON_NULL(received);
            received->wsi = wsi;

            // To protect against non-null-terminated strings, add a null character beyond the length.
            void* payload = malloc((len + 1) * sizeof(char));
            LF_ASSERT_NON_NULL(payload);
            memcpy(payload, in, len);
            ((char*)payload)[len] = '\0';
            received->length = len;
            received->message = payload;
            received->next = NULL;
            received->binary = true; // Treat all received data as binary.
            // Carry the null terminator in the action payload, just in case.
            lf_schedule_value(status->received_action, 0, received, len + 1);
          }
          break;

        case LWS_CALLBACK_SERVER_WRITEABLE:
          // Websocket has become writable.  See whether there are pending
          // messages to send to this wsi.  This requires locking the status mutex
          // because we are accessing the pending_messages list.
          LF_MUTEX_LOCK(status->mutex);

          to_send = status->pending_messages;
          previous_pointer = &status->pending_messages;
          while (to_send) {
            // There is a message to send.
            // Send it if the wsi matches.
            if (to_send->wsi == wsi) {
              // Remove it from the list.
              *previous_pointer = to_send->next;

              int length = to_send->length;
              // The buffer needs LWS_PRE bytes _before_ the message.
              // Do not include the null terminator, because this makes JSON unable to parse it.
              unsigned char buffer[LWS_PRE + length + 1];  // +1 for possible null terminator.
              memcpy(&buffer[LWS_PRE], to_send->message, length);
              int result;
              if (to_send->binary) {
                result = lws_write(to_send->wsi, &buffer[LWS_PRE], length, LWS_WRITE_BINARY);
              } else {
                result = lws_write(to_send->wsi, &buffer[LWS_PRE], length, LWS_WRITE_TEXT);
              }
              if (result < length) {
                lf_print_warning("Send on web socket failed. Message send is incomplete.");
              }
              // Free the memory for the pending send.
              web_socket_message_destructor(to_send);
            } else {
              // If the message is destined to a no-longer connected wsi, delete it.
              if (!hashset_is_member(status->connected_instances, to_send->wsi)) {
                // Remove it from the list.
                *previous_pointer = to_send->next;
                // Free the memory for the pending send.
                web_socket_message_destructor(to_send);
              } else {
                // Keep the message on the list. It is destined to another wsi.
                previous_pointer = &to_send->next;
              }
            }
            to_send = to_send->next;
          }
          // If there is another message, request another callback.
          if (status->pending_messages) {
            lws_callback_on_writable(status->pending_messages->wsi);
          }

          LF_MUTEX_UNLOCK(status->mutex);

          break;

        case LWS_CALLBACK_CLOSED:
          // Remove any pending message destined to this wsi from the list to send.
          LF_MUTEX_LOCK(status->mutex);
          to_send = status->pending_messages;
          previous_pointer = &status->pending_messages;
          while (to_send) {
            if (to_send->wsi == wsi) {
              // Remove it from the list.
              *previous_pointer = to_send->next;
              // Free the memory for the pending send.
              web_socket_message_destructor(to_send);
            } else {
              // Keep the message on the list.
              previous_pointer = &to_send->next;
            }
            to_send = to_send->next;
          }
          LF_MUTEX_UNLOCK(status->mutex);
          break;

        default:
          LF_PRINT_LOG("*** Unhandled callback with lws_callback_reasons %d.", reason);
          break;
      }
      return 0;
    }

    void web_socket_message_destructor(void* message) {
      free(((web_socket_message_t*)message)->message);
      free(message);
      // Do not free the wsi.
    }

    // Argument and return type is web_socket_message_t*.
    void* web_socket_message_copy_constructor(void* message) {
      web_socket_message_t* cast = (web_socket_message_t*)message;
      web_socket_message_t* result = (web_socket_message_t*)malloc(sizeof(web_socket_message_t));
      size_t length = cast->length;
      void* copy = malloc(length * sizeof(char));
      result->message = memcpy(copy, cast->message, length);
      result->wsi = cast->wsi;
      result->length = length;
      result->binary = cast->binary;
      result->next = NULL;
      return result;
    }

    // Append a message to the list of messages to be sent.
    // This assumes the mutex is held.
    static void append_message_to_send(server_status_t* status, web_socket_message_t* copy) {
      // Scroll to the end of the list of pending messages.
      web_socket_message_t** existing = &(status->pending_messages);
      while (*existing != NULL) {
        existing = &((*existing)->next);
      }
      *existing = copy;
      // Have to call lws_cancel_service to unblock the lws thread.
      lws_cancel_service(status->context);
    }

    // Queue a message to be sent.  If the specified wsi is NULL, then broadcast
    // to all open web sockets.
    static void send_message(server_status_t* status, web_socket_message_t* message) {
      if(message->message == NULL) {
        lf_print_error("Cannot send NULL message.");
      } else if (message->wsi == NULL) {
        // Broadcast requested.
        // There does not appear to be a way to iterate over hashset contents.
        // So we iterate over the entire hashset storage and skip empty slots.
        // Need to lock the mutex.
        LF_MUTEX_LOCK(status->mutex);
        for (int i = 0; i < status->connected_instances->capacity; i++) {
          struct lws* instance = (struct lws*) status->connected_instances->items[i];
          if (instance == NULL || instance == (struct lws*)1) continue; // Empty or deleted items.
          web_socket_message_t* copy = (web_socket_message_t*)web_socket_message_copy_constructor(message);
          copy->wsi = instance;
          // Append to the pending list.
          append_message_to_send(status, copy);
        }
        LF_MUTEX_UNLOCK(status->mutex);
      } else if (hashset_is_member(status->connected_instances, message->wsi)) {
        LF_MUTEX_LOCK(status->mutex);
        // Copy the message and append to the context list.
        web_socket_message_t* copy = (web_socket_message_t*)web_socket_message_copy_constructor(message);
        append_message_to_send(status, copy);
        LF_MUTEX_UNLOCK(status->mutex);
      } else {
        lf_print_warning("Web socket no longer connected. Dropping message.");
      }
    }
  =}

  reaction(received_action) -> received {=
    lf_set_token(received, received_action->token);
  =}

  reaction(connected_action) -> connected {=
    lf_set(connected, connected_action->value);
  =}

  reaction(startup) send -> connected_action, received_action {=
    // The receiving thread dynamically allocates memory for messages.
    // Set the destructor and copy constructor.
    lf_set_destructor(received_action, web_socket_message_destructor);
    lf_set_copy_constructor(received_action, web_socket_message_copy_constructor);

    // Assume the input is dynamically allocated, including its message field.
    lf_set_destructor(send, web_socket_message_destructor);
    lf_set_copy_constructor(send, web_socket_message_copy_constructor);

    struct lws_context_creation_info info;
    memset(&info, 0, sizeof(info));
    info.port = self->hostport;
    info.iface = NULL; // Can put a string here?
    info.protocols = (struct lws_protocols[]) {
      {
        "http",
        callback_http,
        0 // No per-session data.
      },
      {
        "ws",
        callback_ws,
        0 // No per-session data.
      },
      { NULL, NULL, 0 }
    };
    // To get callbacks to be passed a pointer to the status struct:
    info.user = &self->status;

    // Callbacks will need to acquire a mutex to modify the status struct pending_messages field.
    self->status.mutex = (lf_mutex_t*)calloc(1, sizeof(lf_mutex_t));
    if (lf_mutex_init(self->status.mutex)) {
      lf_print_error_and_exit("Failed to initialize mutex in WebSocketServer.");
    }

    self->status.context = lws_create_context(&info);
    if (!self->status.context) {
      lf_print_error_and_exit("Failed to create server for web sockets.");
    }

    self->status.connected_action = connected_action;
    self->status.received_action = received_action;

    self->status.max_clients = self->max_clients;
    self->status.client_count = &self->client_count;
    self->status.initial_file = self->initial_file;
    self->status.running = true;
    self->status.connected_instances = hashset_create(8); // Default capacity for eight instances.

    lf_thread_t listener;
    lf_thread_create(&listener, &websocket_thread, &self->status);

    if (self->initial_file != NULL) {
      lf_print("**** Point your browser to http://localhost:%d", self->hostport);
    }
  =}

  reaction(send) {=
    // NOTE: This send cannot be before the reaction to connected_action
    // because we will get a causality loop.
    send_message(&self->status, send->value);
  =}

  reaction(shutdown) {=
    self->status.running = false;
    if (self->status.connected_instances != NULL) {
      hashset_destroy(self->status.connected_instances);
    }
  =}
}
