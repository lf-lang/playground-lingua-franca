/**
 * Demo of a use of WebSocketServerString enabling a user interface realized in the browser. Compile
 * and run this program, then open WebSocket.html in your favorite browser. This example program
 * sends to the web page a counting sequence. It also accepts text messages from the web page and
 * prints them on standard output.
 *
 * This example limits the number of connections to just one. Its purpose is to show how to use the
 * simpler WebSocketServerString when you need just one connection and the data exchanged is always
 * a string.
 *
 * @author Edward A. Lee
 */
target C {
  keepalive: true
}

import WebSocketServerString from "../lib/WebSocketServerString.lf"

main reactor {
  state count: int = 0
  state connected: bool = false

  logical action send_action

  s = new WebSocketServerString(initial_file="WebSocket.html")

  reaction(send_action) -> s.in_dynamic, send_action {=
    // Send using the `in_dynamic` port because the string sent is dynamically allocated.
    // If the web socket is no longer connected, do nothing.
    if (self->connected) {
      // Create the message.
      char* message;
      asprintf(&message, "Count is: %d", self->count++);

      // Send the message.
      lf_set(s.in_dynamic, message);

      // Schedule the next send.
      lf_schedule(send_action, SEC(1));
    }
  =}

  reaction(s.connected) -> send_action {=
    if (s.connected->value) {
      lf_print("======== Client has connected");
    } else {
      lf_print("======== Client has disconnected");
    }
    self->connected = s.connected->value;
    if (s.connected->value) {
      // Start sending.
      lf_schedule(send_action, 0);
    }
  =}

  reaction(s.received) {=
    // NOTE: The WebSocketServerString ensures that the received message is null terminated.
    lf_print("======== Application received: %s", (char*)s.received->value);
  =}
}
