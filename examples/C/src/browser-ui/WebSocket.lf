/**
 * Demo of a use of WebSocketServer enabling a user interface realized in the browser. Compile and
 * run this program, then open WebSocket.html in your favorite browser. This example program sends
 * to all connected web pages a counting sequence. The count starts when the first web page
 * connects. This also accepts text messages from the web page and prints them on standard output.
 *
 * This example also shows how to limit the number of connections to just two. If you try to open
 * the WebSocket.html web page more than twice, only the first two attempts will succeed in
 * connecting. By default, WebSocketServer imposes no such limit.
 *
 * This uses the <a href="https://libwebsockets.org">libwebsockets</a> (see <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/index.html">API documentation</a> and <a
 * href="https://libwebsockets.org/lws-api-doc-main/html/md_READMEs_README_build.html">installation
 * instructions</a>). To install on MacOS, we recommending using brew:
 * ```
 *   brew install libwebsockets
 * ```
 * This puts the compiled libraries in {@code /usr/local/lib}, and these libraries can be linked to
 * using the {@code -lwebsockets} compile option or the {@code WebSocketCmake.txt} Cmake include
 * file.
 *
 * @author Edward A. Lee
 */
target C {
  keepalive: true
}

import WebSocketServer from "../lib/WebSocketServer.lf"

main reactor {
  state count: int = 0
  state running: bool = false
  logical action send_action: web_socket_instance_t*

  s = new WebSocketServer(
      hostport=8080,
      max_clients=2,  // Limit number of clients to 2.
      initial_file="WebSocket.html")

  reaction(send_action) -> s.send, send_action {=
    char* message;
    asprintf(&message, "Count is: %d", self->count++);

    web_socket_message_t* container = (web_socket_message_t*)malloc(sizeof(web_socket_message_t));
    container->message = message;
    container->length = strlen(message) + 1;
    container->wsi = NULL; // Broadcast to all connected clients.
    container->binary = false; // Sending text.

    lf_set(s.send, container);
    // Schedule the next send.
    lf_schedule_token(send_action, SEC(1), send_action->token);
  =}

  reaction(s.connected) -> send_action {=
    if (s.connected->value.connected) {
      lf_print("======== Connected a new client");

      // Start sending if not already started.
      if (!self->running) {
        lf_schedule_copy(send_action, 0, &s.connected->value, 1);
        self->running = true;
      }
    } else {
      lf_print("======== Disconnected client");
    }
  =}

  reaction(s.received) {=
    // NOTE: The WebSocketServer ensures that the received message is null terminated.
    lf_print("======== Application received: %s", (char*)s.received->value->message);
  =}
}
