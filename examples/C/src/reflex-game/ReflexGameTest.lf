/**
 * The Lingua Franca (LF) program above is designed to read characters from user input and display
 * them along with the elapsed time since the last input. The program starts a separate thread to
 * read characters from the keyboard, and it sends the input characters as valued physical actions
 * to the main reactor. Upon receiving a character, the program calculates the time elapsed since
 * the last input and prints the character along with the elapsed time in nanoseconds. If the
 * received character is an end-of-file (EOF) signal (e.g., Control-D or Control-Z), the program
 * stops execution.
 */
target C {
  keepalive: true,
  timeout: 5 sec
}

main reactor {
  preamble {=
    // Specify a thread that sends all keyboard characters
    // as valued physical actions until an EOF (control-d or
    // control-z) is received.
    void* read_char(void* a) {
      while(1) {
        char* c = (char*)malloc(sizeof(char));
        *c = getchar();
        lf_schedule_value(a, 0, c, 1);
        if (*c == EOF) break;
      }
      return NULL;
    }
  =}

  state thread_id: lf_thread_t = 0
  state request_time: time = 0
  // NOTE: The following will get the default 1 nsec minimum interarrival
  // time.
  physical action a: char*

  reaction(startup) -> a {=
    // Start listening for key strokes.
    // Note that these will not be received until Enter.
    lf_thread_create(&self->thread_id, &read_char, a);
    printf("Enter character(s) followed by return: ");
    self->request_time = lf_time_logical();
  =}

  reaction(a) {=
    if (*a->value == EOF) {
      printf("\nEnd of file received.\n");
      lf_request_stop();
    } else if (*a->value == '\n') {
      printf("Enter character(s) followed by return: ");
      self->request_time = lf_time_logical();
      fflush(stdout);
    } else {
      interval_t elapsed = lf_time_logical() - self->request_time;
      printf("Character entered: %c after %lld nsec.\n", *a->value, elapsed);
    }
  =}
}
