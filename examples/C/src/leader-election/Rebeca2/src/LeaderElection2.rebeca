//
// This program models a redundant fault tolerant system where a primary node, if and when it fails,
// is replaced by a backup node. This version models network switch failures that are spaced
// sufficiently far apart in time that dual primaries do not emerge.  To manage the state-space
// size, the heartbeat period and other time values are reduced.
//
// The protocol is described in this paper:
//
// Bjarne Johansson; Mats RÃ¥gberger; Alessandro V. Papadopoulos; Thomas Nolte, "Consistency Before
// Availability: Network Reference Point based Failure Detection for Controller Redundancy," paper
// draft 8/15/23.
//
// The key idea in this protocol is that when a backup fails to detect the heartbeats of a primary
// node, it becomes primary only if it has access to Network Reference Point (NRP), which is a point
// in the network.
//
// The Primary sends heartbeats on two networks,
// if the Backup receives the heartbeats from both networks then all is fine.
// If it receives the heartbeat only from one network the Backup pings the NRP, if NRP replies all is fine,
// if not
// If Backup misses heartbeats on both networks then it assumes that the Primary failed and pings NRP,
// if NRP replies, Backup becomes the Primary
// if not ...
//
// The Rebeca code is adopted from the LF code by Edward Lee and Marjan Sirjani
 
 
env int heartbeat_period = 20;
env int max_missed_heartbeats = 2;
env int ping_timeout = 10; 
env int nrp_timeout = 10; // Timeout for requesting a new NRP.
// Node Modes
env byte WAITING = 0;
env byte PRIMARY = 1;
env byte BACKUP = 2;
env byte FAILED = 3;
env byte NumberOfNetworks = 2;
 
// for testing
env int fails_at_time = 0; //zero for no failure
 
env int switchA1failtime = 0;
env int switchA2failtime = 0;
env int switchA3failtime = 0;
env int switchB1failtime = 0;
env int switchB2failtime = 0;
env int switchB3failtime = 0;
 
env int node1failtime = 0;
env int node2failtime = 0;
 
env int networkDelay = 1;

// Minimum time between switch failures is H + 2N + 1, where H is the heartbeat_period and N is the networkDelay.
// The +1 is needed because of the nondeterministic ordering of message handlers.
// If a switch receives a switchFail() message at some time t, it nondeterministically may forward
// a heartbeat message that happens to arrive at the same time.
// The +1 ensures that the failure occurs after the message has been forwarded.
env int min_interval = 23;
 
// Generate switchFailure messages to switches that are nondeterministically chosen.
// This class ensures a minimum interval of min_interval between any two switch failures.
reactiveclass FailureController(10) {
 
    knownrebecs {
        Switch switchA1, switchA2, switchA3, switchB1, switchB2, switchB3;
    }
   
    statevars {
    }
   
    FailureController () {
        self.chooseFailureTime() after(2*heartbeat_period);  // Let startup phase pass.
    }
   
    msgsrv chooseFailureTime() {
        // FIXME: Assumes heartbeat_period == 20.
        int failure_time = ? (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);
        self.maybeFail() after (failure_time);
    }
    
    msgsrv maybeFail() {
        boolean failure = ? (false, true);
        // Switch 1 is the NRP.  If we allow it to fail, then we get a counterexample.
        byte s = ? (1, 2, 3, 4, 5, 6);
        if (failure) {
            if (s == 1) {
                switchA1.switchFail();
            } else if (s == 2) {
                switchA2.switchFail();
            } else if (s == 3) {
                switchA3.switchFail();
            } else if (s == 4) {
                switchB1.switchFail();
            } else if (s == 5) {
                switchB2.switchFail();
            } else if (s == 6) {
                switchB3.switchFail();
            }
            self.chooseFailureTime() after (min_interval);           
        } else {
            self.chooseFailureTime() after (1);
        }
    }
}

// FIXME: Node and Switch are copied from NRFFD.rebeca.
// Can they be imported instead?
 
reactiveclass Node (20){
 
    knownrebecs {
        Switch out1, out2;
    }
  
    statevars {
           byte mode;
           int id;
           int [2] NRPCandidates;
           int heartbeats_missed_1;
           int heartbeats_missed_2;
           int NRP_network;
           int NRP_switch_id;
           boolean NRP_pending;
           boolean become_primary_on_ping_response; 
           int primary;
           boolean ping_pending;
    }
   
    Node (int Myid, int Myprimary, int NRPCan1_id, int NRPCan2_id, int myFailTime) {
        id = Myid;
        NRPCandidates[0] = NRPCan1_id;
        NRPCandidates[1] = NRPCan2_id;   
        heartbeats_missed_1 = 0;
        heartbeats_missed_2 = 0;
        NRP_network = -1;
        NRP_switch_id = -1;
        NRP_pending = true;
        become_primary_on_ping_response = false;
        primary = Myprimary;
        ping_pending = false;
        mode = WAITING;
        if(myFailTime!=0) nodeFail() after(myFailTime);
        runMe();
    }
   
    // Check whether a response was received to request_new_NRP() and fail if not.
    msgsrv new_NRP_request_timed_out() {
        if (mode == BACKUP) {
            if (NRP_pending) {
                NRP_pending = false;
                mode = FAILED;
            }
        }
    }    
     
    // logical action ping_timed_out(ping_timeout)
    msgsrv ping_timed_out() {
        if (mode == BACKUP) {
            if (ping_pending) {
                // Backup node did not get a response to the ping of the NRP.
                ping_pending = false;
                // Request a new NRP, unless it pinged the NRP because both networks had missed heartbeats.
                // In that case, it should just fail.
                if (become_primary_on_ping_response) {
                    become_primary_on_ping_response = false;
                    mode = FAILED;
                } else if (NRP_network <= NumberOfNetworks) {
                    // Request a new NRP should be possible.
                    NRP_pending = true;
                    NRP_network++;
                    NRP_switch_id = NRPCandidates[NRP_network];
                    if (NRP_network == 0) out1.request_new_NRP(id) after(networkDelay);
                    else out2.request_new_NRP(id) after(networkDelay);
                    self.new_NRP_request_timed_out() after(nrp_timeout);
                } else {
                    NRP_network = NumberOfNetworks;
                    mode = FAILED; // Operator intervention required.
                }
            }
        } else if (mode == PRIMARY) {
            if (ping_pending) {
                // NRP did not respond to ping. Try to find a new NRP, if possible, and fail otherwise.
                NRP_pending = true;
                NRP_network++;
                if (NRP_network < NumberOfNetworks) {
                    // Select the NRP candidate on the new network and ping it.
                    NRP_switch_id = NRPCandidates[NRP_network];
                    if (NRP_network == 0) out1.pingNRP(id, NRP_switch_id) after(networkDelay);
                    else out2.pingNRP(id, NRP_switch_id) after(networkDelay);
                    self.ping_timed_out() after(ping_timeout);
                } else {
                    NRP_network = NumberOfNetworks;
                    mode = FAILED; // Operator intervention required.
                }
            } else {
               out1.heartBeat(0, id) after(networkDelay);
               out2.heartBeat(1, id) after(networkDelay);
            }
        }
    }
    
    msgsrv pingNRP_response(int mid) {
        if (mode == BACKUP) {
            ping_pending = false;
            if (become_primary_on_ping_response) {
                // Confirmed that NRP is accessible even though heartbeats are missing on both networks.
                // Become primary.
                become_primary_on_ping_response = false;
                mode = PRIMARY;
                primary = id;
            }
        } else if (mode == PRIMARY) {
            ping_pending = false;
            if (NRP_pending) {
                NRP_pending = false; // NRP is confirmed.
                if (NRP_network==0) out1.new_NRP(id, NRP_network, NRP_switch_id);
                else out2.new_NRP(id, NRP_network, NRP_switch_id);
            }
        }
    }
   
    msgsrv new_NRP(int mid, int mNRP_network, int mNRP_switch_id) {
        NRP_network = mNRP_network;
        NRP_switch_id = mNRP_switch_id;
        NRP_pending = false;
        // There is no need to ping the new NRP because the new_NRP message came in
        // over the network containing the NRP, so the NRP must be accessible.
    }
   
    msgsrv request_new_NRP(int origin) {
        if (NRP_network <= NumberOfNetworks) {
            // Should be possible to respond with a new NRP.
            NRP_network++;
            NRP_switch_id = NRPCandidates[NRP_network];
            if (NRP_network == 0) out1.new_NRP(id, NRP_network, NRP_switch_id);
            else out2.new_NRP(id, NRP_network, NRP_switch_id);
        }
    }
    
    msgsrv runMe() {
        switch(mode) {
            case 0: //WAITING :
                if (id == primary) {
                    mode = PRIMARY;
                    NRP_network++;
                    if (NRP_network < NumberOfNetworks) {
                        NRP_switch_id = NRPCandidates[NRP_network];
                        if (NRP_network == 0) out1.new_NRP(id, NRP_network, NRP_switch_id);
                        else out2.new_NRP(id, NRP_network, NRP_switch_id);
                     } else NRP_network = NumberOfNetworks;
                 } else mode = BACKUP;
                 break;
             case 1: //PRIMARY :
                 if (NRP_network == 0) {   
                     ping_pending = true;
                     out1.pingNRP(id, NRP_switch_id) after(networkDelay);
                     ping_timed_out() after(ping_timeout);
                 } else {
                     ping_pending = true;
                     out2.pingNRP(id, NRP_switch_id) after(networkDelay);
                     ping_timed_out() after(ping_timeout);
                 }
                 NRP_pending = true;
                 break;
             case 2: //BACKUP :
                 heartbeats_missed_1++;
                 heartbeats_missed_2++;
    
                 if (heartbeats_missed_1 > max_missed_heartbeats && heartbeats_missed_2 > max_missed_heartbeats) {
                     if (heartbeats_missed_1==heartbeats_missed_2) {
                         // Simultaneous heartbeat misses.
                         // In the paper, this is tmoAllNotSimul.
                         // For the tmoAllSimul optimization in the paper, we assume that if
                         // self->heartbeats_missed[0] == self->heartbeats_missed[1], then most likely, it is
                         // the primary that failed, and not the network, so can immediately become the primary.
                         // Otherwise, it is possible that one network failed, and then the other failed, in which
                         // case, we may have a partitioned network.
                         mode = PRIMARY;
                         primary = id;
                     } else {
                         // Both heartbeat miss counters are above threshold, but they are not equal.
                         // We do not assume the primary failed. Instead, check whether the NRP is reachable,
                         // and if so, then become primary.
                         become_primary_on_ping_response = true;
                         ping_pending = true;
                         if (NRP_network == 0){   
                             out1.pingNRP(id, NRP_switch_id) after(networkDelay);
                         } else {
                             out2.pingNRP(id, NRP_switch_id) after(networkDelay);
                         }
                         ping_timed_out() after(ping_timeout);
                     }
                 } else if (heartbeats_missed_1 > max_missed_heartbeats || heartbeats_missed_2 > max_missed_heartbeats) {
                     // Heartbeat missed on one network but not yet on the other.
                     // Ping the NRP to make sure we retain access to it so that we can be an effective backup.
                     // This corresponds to tmoSomeNotAll in the paper.
                     ping_pending = true;
                     if (NRP_network==0 && heartbeats_missed_1 > max_missed_heartbeats) {
                         out1.pingNRP(id, NRP_switch_id) after(networkDelay);
                     } else if (NRP_network ==1  && heartbeats_missed_2 > max_missed_heartbeats) {
                         out2.pingNRP(id, NRP_switch_id) after(networkDelay);
                     }
                     ping_timed_out() after(ping_timeout);
                 }
                 // Prevent detecting again immediately.
                 heartbeats_missed_1 = 0;
                 heartbeats_missed_2 = 0;
                 break;
              
             case 3: //FAILED :
                 break;
        }
        self.runMe() after(heartbeat_period);
    }
    
    msgsrv heartBeat(byte networkId, int senderid) {
        if (mode==BACKUP) {
            if (networkId == 0) heartbeats_missed_1 = 0;
            else heartbeats_missed_2 = 0;
        }
    }
   
    msgsrv nodeFail() {
        primary=-1;
        mode = FAILED;
        NRP_network=-1;
        NRP_switch_id=-1;
        heartbeats_missed_1 = 0;
        heartbeats_missed_2 = 0;
        NRP_pending = true;
        become_primary_on_ping_response = false;
        ping_pending = false;
    }
}

reactiveclass Switch(10) {
 
    knownrebecs {
    }
   
    statevars {
        byte mynetworkId;
        int id;
        boolean failed;
        boolean amINRP;
        boolean terminal;
        Node nodeTarget1;
        Switch switchTarget2;
        Switch switchTarget1;
    }
    Switch (int myid, byte networkId, boolean term, Switch s1, Switch s2, int myFailTime, Node n1) {
        mynetworkId = networkId;
        id = myid;
        amINRP = false;
        failed = false;
        switchTarget1 = s1;
        switchTarget2 = s2;
        terminal=term;
        nodeTarget1=n1;
        if (myFailTime!=0) switchFail() after(myFailTime);
    }
   
    msgsrv switchFail() {
        failed = true;
        amINRP=false;
    }
   
    msgsrv pingNRP_response(int senderNode) {
        if (!failed) {
            if (terminal && senderNode <= 100) {
                nodeTarget1.pingNRP_response(id) after(networkDelay); //Pass back
            } else if (senderNode>id) {
                switchTarget1.pingNRP_response(id) after(networkDelay);
            } else {
                switchTarget2.pingNRP_response(id) after(networkDelay);
            }
        }
    }
   
    msgsrv request_new_NRP(int senderNode) {
        if (!failed) {
            if (terminal && senderNode < 100) nodeTarget1.request_new_NRP(id) after(networkDelay);
            else if (senderNode > id) switchTarget1.request_new_NRP(id) after(networkDelay);
            else switchTarget2.request_new_NRP(id) after(networkDelay);
        }
    }
   
    msgsrv pingNRP(int senderNode, int NRP) {
        if (!failed) {
            if (NRP == id) {
                if (senderNode < 100) switchTarget2.pingNRP_response(id) after(networkDelay); //Response
                else nodeTarget1.pingNRP_response(id) after(networkDelay);
            } else {
                if(senderNode < 100) {
                    if(senderNode>id) switchTarget1.pingNRP(id, NRP) after(networkDelay);
                    else switchTarget2.pingNRP(id, NRP) after(networkDelay);
                } else {
                    switchTarget2.pingNRP(id, NRP) after(networkDelay);
                }
            }
        }
    }
 
    msgsrv new_NRP(int senderNode, int mNRP_network, int mNRP_switch_id) {
        if (!failed) {
            if (id == mNRP_switch_id) amINRP=true;
            else amINRP=false;
         
            if (terminal && senderNode < 100) nodeTarget1.new_NRP(id, mNRP_network, mNRP_switch_id); //Pass back
            else if(senderNode>id) switchTarget1.new_NRP(id, mNRP_network, mNRP_switch_id);
            else switchTarget2.new_NRP(id, mNRP_network, mNRP_switch_id);
        }
    }
   
    msgsrv heartBeat(byte networkId, int senderNode) {
        if (!failed) {
            if (terminal && senderNode < 100) nodeTarget1.heartBeat(networkId,id) after(networkDelay);
            else if (senderNode > id) switchTarget1.heartBeat(networkId,id) after(networkDelay);
            else switchTarget2.heartBeat(networkId,id) after(networkDelay);
        }
    }
}
 
main {
    @Priority(1) FailureController failureC(switchA1, switchA2, switchA3, switchB1, switchB2, switchB3):();
   
    @Priority(1) Switch switchA1():(1, 0, true , switchA2 , switchA2 , switchA1failtime, DCN1);
    @Priority(1) Switch switchA2():(2 ,0, false , switchA1 , switchA3 , switchA2failtime, null);
    @Priority(1) Switch switchA3():(3, 0, true , switchA2 , switchA2 , switchA3failtime, DCN2);
    @Priority(1) Switch switchB1():(4, 1, true , switchB2 , switchB2 , switchB1failtime, DCN1);
    @Priority(1) Switch switchB2():(5, 1, false , switchB1 , switchB3 , switchB2failtime, null);
    @Priority(1) Switch switchB3():(6, 1, true , switchB2 , switchB2 , switchB3failtime, DCN2);
 
    @Priority(2) Node DCN1(switchA1, switchB1):(100, 100, 1, 4, node1failtime);
    @Priority(2) Node DCN2(switchA3, switchB3):(101, 100, 3, 6, node2failtime);
}
