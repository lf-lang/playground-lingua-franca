/**
 * This project implements a fault-tolerant task execution model using checkpoint and retry
 * mechanisms, and predictive task dropping. The system is designed to simulate execution of
 * multi-segment tasks with faults using logical execution time.
 *
 * 1. Checkpointed Task Execution: Tasks are divided into segments, each with its own worst-case and
 * optimistic execution time. Faults are simulated with probabilistic failures, and task is restored
 * from the checkpoint when fails.
 *
 * 2. Predictive Task Dropping: Upon segment failure, the system evaluates whether retrying will
 * still meet the task's deadline and only proceeds if the deadline constraint is preserved.
 *
 * The purpose of this design is to investigate how logic-based scheduling and retry policies can
 * improve reliability in real-time embedded systems.
 *
 * @author Dongha Kim
 */
target C {
  timeout: 9900 msec
}

import CheckDeadlineAndRetry, TaskScheduler from "lib/TaskRetryTemplate.lf"
import Task1 from "TaskExample.lf"

main reactor {
  task = new Task1<int, int, int>(
      task_num=1,
      dead_line=3000,
      num_of_segs=3,
      wcet = {300, 300, 300},
      optwcet = {250, 250, 250})
  retry = new CheckDeadlineAndRetry()
  scheduler = new TaskScheduler<int>(period = 5000 msec, in=0)

  scheduler.trigger -> task.new_instance
  scheduler.task_input -> task.task_input
  task.task_info_update -> retry.task_info_update
  task.instance_start_time -> retry.instance_start_time_update
  task.failed_seg -> retry.failed_seg
  retry.out -> task.retry after 0
}
