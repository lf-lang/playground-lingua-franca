/** @author Dongha Kim */
target C

preamble {=
  #include <stdlib.h> // rand()
  #include "platform.h" // lf_sleep()
  #ifndef TASK_INFO_T_DEFINED
  #define TASK_INFO_T_DEFINED
  typedef struct task_info_t {
    uint16_t task_num;
    uint16_t dead_line;
    uint16_t num_of_segs;
    uint16_t* wcet;
    uint16_t* optwcet;
  } task_info_t;
  #endif
=}

reactor TriggerTask (task_num: uint16_t = 0) {
  input new_instance: int
  input retry: int
  output trigger_task: int
  output instance_start_time: time

  reaction(new_instance, retry) -> trigger_task, instance_start_time {=
    int segment_start_num;
    if(retry->is_present) {
      // When Retry was triggered. retry->value should not be 0.
      if (retry->value != 0) {
        segment_start_num = retry->value;
      } else {
        // Don't trigger retry. 0 means the segment was completed.
        return;
      }
    } else { // When new_instance is triggered.
      // Can be triggered by the timer or anything. However, only start when the value is 0.
      if(new_instance->value == 0){
        segment_start_num = 1; // Start from segment 1.
        lf_set(instance_start_time, lf_time_logical_elapsed());
        // When timer triggers.
        lf_print("**** New instance of task %d starting. Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.\n", self->task_num, lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
      } else {
        // New instance should only be triggered when value is 0. Don't schedule to trigger task.
        return;
      }
    }
    lf_set(trigger_task, segment_start_num);
  =}
}

reactor TaskRetryNoAdvance(
    task_num: uint16_t = 0,
    // dead_line: uint16_t = 0,
    num_of_segs: uint16_t = 0
    // wcet: uint16_t[] = {},
    // optwcet: uint16_t[] = {},
  ) {
  input new_instance: int
  input retry: int

  

  output failed_seg: int
  // output instance_start_time: time
  // output task_info_update: task_info_t
  // state task_info: task_info_t

  trigger = new TriggerTask(task_num = task_num)
  new_instance -> trigger.new_instance
  retry -> trigger.retry
  // trigger.instance_start_time -> instance_start_time

  // reaction(startup) -> task_info_update {=
  //   self->task_info.task_num = self->task_num;
  //   self->task_info.num_of_segs = self->num_of_segs;
  //   self->task_info.wcet = self->wcet;
  //   self->task_info.optwcet = self->optwcet;
  //   self->task_info.dead_line = self->dead_line;
  //   lf_set(task_info_update, self->task_info);
  // =}
}

reactor TaskBody{
  input trigger_task: int
  output calculate_lt: int
}

reactor NoTaskDrop (dead_line: time = 0 msec){
  input failed_seg: int
  output out: int
  state total_tasks: int = 0
  state deadline_missed: int=0
  state task_dropped: int = 0
  state execution_failed: int = 0
  state execution_success: int = 0
  
  reaction(failed_seg) -> out {=
    if (failed_seg->value != 0) {
      lf_print("Segment %d failed.", failed_seg->value);
    } else {
      self->execution_success ++;
    }
    // Just retry.
    lf_set(out, failed_seg->value);
  // Couldn't use deadline. The LF's deadline is the physical_time - current_logical_time
  =} deadline(dead_line) {=
    lf_print("Deadline violated! Dropping task.");
    lf_print("Current Logical time: %lld msecs, microstep: %d, Physical time: %lld msecs.", lf_time_logical_elapsed() / MSEC(1), lf_tag().microstep, lf_time_physical_elapsed() / MSEC(1));
    if (failed_seg->value != 0) {
      self->execution_failed++;
      lf_print("Deadline: Segment %d failed.", failed_seg->value);
    } else {
      self->execution_success ++;
      lf_print("Deadline missed, but execution success.");
    }
    self->deadline_missed++;
  =}

  reaction(shutdown) {=
    lf_print("Deadline missed: %d", self->deadline_missed);
    lf_print("No task dropped: %d", self->task_dropped);
    lf_print("Execution failed: %d", self->execution_failed);
    lf_print("Execution Success: %d", self->execution_success -1);
  =}
}
