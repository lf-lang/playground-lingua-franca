/**
 * This project implements a fault-tolerant task execution model using checkpoint and retry
 * mechanisms, and predictive task dropping. The system is designed to simulate execution of
 * multi-segment tasks with faults using logical execution time.
 *
 * 1. Checkpointed Task Execution: Tasks are divided into segments, each with its own worst-case and
 * optimistic execution time. Faults are simulated with probabilistic failures, and task is restored
 * from the checkpoint when fails.
 *
 * 2. Predictive Task Dropping: Upon segment failure, the system evaluates whether retrying will
 * still meet the task's deadline and only proceeds if the deadline constraint is preserved.
 *
 * The purpose of this design is to investigate how logic-based scheduling and retry policies can
 * improve reliability in real-time embedded systems.
 *
 * @author Dongha Kim
 */
target C {
  // fast: true,
  // timeout: 10 min
  single-threaded: true,
  timeout: 420 secs
  // timeout: 5 secs
}

import NoTaskDrop from "TaskRetryNoAdvanceTemplate.lf"
import Task2, TaskScheduler from "TaskExampleEval05.lf"

main reactor {
  task = new Task2(
      task_num=2,
      num_of_segs=3
    )
  retry = new NoTaskDrop(dead_line = 42 msec)
  scheduler = new TaskScheduler(period = 42 msec)

  scheduler.trigger -> task.new_instance
  // task.task_info_update -> retry.task_info_update
  // task.instance_start_time -> retry.instance_start_time_update
  task.failed_seg -> retry.failed_seg
  retry.out -> task.retry after 0
}
