/**
 * Sketch of an ADAS system illustrating tradeoffs between consistency and availability. This
 * version experiences deadline violations in the Brake component because of processing times in the
 * BrakingAssistant component. This version is federated for fair comparison with the other two
 * versions.
 *
 * @author Christian Menard
 * @author Edward A. Lee
 */
target C {
  timeout: 10 s,
  DNET: false,
  keepalive: true
}

preamble {=
  #include "platform.h"  // Defines PRINTF_TIME and threading functions.
=}

reactor Camera {
  timer t(20 ms, 33 ms)
  output frame: bool

  reaction(t) -> frame {=
    lf_set(frame, true); // send a "frame"
  =}
}

reactor BrakingAssistant {
  input frame: bool
  output trigger_brake: bool

  state counter: int = 0

  reaction(frame) -> trigger_brake {=
    // processing takes some time (10 ms)
    lf_sleep(MSEC(10));

    if (self->counter % 10 == 0) {
      lf_print("[automatic] Send the brake signal at physical time " PRINTF_TIME, lf_time_physical_elapsed());
      lf_set(trigger_brake, true);
    }
    self->counter++;
  =}
}

reactor Braking {
  preamble {=
    // Function to simulate the pressing of the brake pedal every 1005ms.
    bool stop_thread = false;
    void* press_pedal(void* pedal) {
      while(!stop_thread) {
        lf_sleep(MSEC(1005));
        lf_print("[manual] Pressing the brake pedal at physical time " PRINTF_TIME,
          lf_time_physical_elapsed()
        );
        lf_schedule(pedal, 0);
      }
      return NULL;
    }
  =}
  input brake_assistant: bool

  physical action pedal

  state thread: lf_thread_t

  reaction(startup) -> pedal {=
    lf_thread_create(&self->thread, &press_pedal, pedal);
  =}

  reaction(shutdown) {=
    stop_thread = true;
    void* thread_join_status;
    lf_thread_join(self->thread, &thread_join_status);
  =}

  reaction(pedal) {=
    lf_print("[system] Brake manually triggered at physical time " PRINTF_TIME,
      lf_time_physical_elapsed()
    );
  =} deadline(3 msecs) {=
    lf_print("\033[1;31m[ERROR]\033[0m Deadline on manual braking violated at physical time " PRINTF_TIME,
      lf_time_physical_elapsed()
    );
  =}

  reaction(brake_assistant) {=
    lf_print("[system] Brake automatically triggered at physical time " PRINTF_TIME,
      lf_time_physical_elapsed()
    );
  =} deadline(25 msecs) {=
    lf_print("\033[1;31m[error]\033[0m Deadline on automatic braking violated "
      "at physical time " PRINTF_TIME, lf_time_physical_elapsed()
    );
  =}
}

reactor Vision {
  output trigger_brake: bool
  camera = new Camera()
  assistant = new BrakingAssistant()

  camera.frame -> assistant.frame
  assistant.trigger_brake -> trigger_brake
}

federated reactor {
  braking = new Braking()
  vision = new Vision()

  vision.trigger_brake -> braking.brake_assistant
}
