'''
This is a shared itemlist for multiple people 
to appendItem or deltetItem at the same time 

Simulate when multiple clients append or delete items from the 
same sharedItem list.
'''
target Python {
    timeout: 1 sec
}

reactor List {
    state itemList;
    timer t(0, 2 sec);
    output out;
    reaction(t) -> out {=
        self.itemList = ["bear", "oski", "frosty"]
        out.set(self.itemList)
    =}
}

reactor AddItem(index(0), item("cal")) {
    input itemList;
    output out;
    reaction(itemList) -> out {=
        # do nothing if index out of range
        n = len(itemList.value)
        if 0 <= self.index < n:
            itemList.value.insert(self.index, self.item)
        out.set(itemList.value)
    =}
}

reactor DeleteItem(index(0)) {
    input itemList;
    output out;
    reaction(itemList) -> out {=
        n = len(itemList.value)
        if 0 <= self.index < n:
            del itemList.value[self.index]
        out.set(itemList.value)
    =}
}

reactor UpdateItem(index(0), item("update")) {
    input itemList;
    output out;
    reaction(itemList) -> out {=
        itemList.value[self.index] = self.item
        out.set(itemList.value)
    =}
}

reactor Printer(N(3)) {
    input[N] _in;
    reaction(_in) {=
        for i in range(self.N):
            print(_in[i].value)
    =}
}

main reactor {
    l = new List();
    add_item = new AddItem();
    delete_item = new DeleteItem(index = 1);
    upadate_item = new UpdateItem();
    p = new Printer();
    l.out -> add_item.itemList;
    l.out -> delete_item.itemList;
    l.out -> upadate_item.itemList;
    add_item.out, delete_item.out, upadate_item.out -> p._in;
}

